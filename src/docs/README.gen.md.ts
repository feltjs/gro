import {dirname, relative, basename} from 'node:path';
import {toPathParts, toPathSegments} from '@feltjs/util/path-parsing.js';
import {stripStart} from '@feltjs/util/string.js';

import {type Gen, toOutputFileName} from '../gen/gen.js';
import {paths, basePathToSourceId} from '../paths.js';

// This renders a simple index of a possibly nested directory of files.

// TODO look at `tasks.gen.md.ts` to refactor and generalize
// TODO show nested structure, not a flat list
// TODO work with file types beyond markdown

export const gen: Gen = async ({fs, originId}) => {
	// TODO need to get this from project config or something
	const rootPath = toPathSegments(paths.root).at(-1);

	const originDir = dirname(originId);
	const originBase = basename(originId);

	const baseDir = paths.source;
	const relativePath = stripStart(originId, baseDir);
	const relativeDir = dirname(relativePath);

	// TODO should this be passed in the context, like `defaultOutputFileName`?
	const outputFileName = toOutputFileName(originBase);

	// TODO this is GitHub-specific
	const rootLink = `[${rootPath}](/../..)`;

	const docFiles = await fs.findFiles(originDir);
	const docPaths: string[] = [];
	for (const path of docFiles.keys()) {
		if (path === outputFileName || !path.endsWith('.md')) {
			continue;
		}
		docPaths.push(path);
	}
	const docs = docPaths;

	// TODO do we want to use absolute paths instead of relative paths,
	// because GitHub works with them and it simplifies the code?
	const isIndexFile = outputFileName === 'README.md';
	const pathParts = toPathParts(relativeDir).map((relativePathPart) =>
		isIndexFile && relativePathPart === relativeDir
			? relativePathPart
			: `[${toPathSegments(relativePathPart).at(-1)}](${
					relative(originDir, basePathToSourceId(relativePathPart)) || './'
			  })`,
	);
	const breadcrumbs = '> <sub>' + [rootLink, ...pathParts, outputFileName].join(' / ') + '</sub>';

	// TODO render the footer with the originId
	return `# docs

${breadcrumbs}

${docs.reduce((docList, doc) => docList + `- [${basename(doc, '.md')}](${doc})\n`, '')}
${breadcrumbs}

> <sub>generated by [${originBase}](${originBase})</sub>
`;
};
